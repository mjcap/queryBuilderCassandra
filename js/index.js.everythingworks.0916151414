"use strict";

var tmdDevice = new Object();

var pass = "";
var server = "";
var port = "";

var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },

    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicitly call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        app.receivedEvent('deviceready');
	console.log("MobileMockUp2 in onDeviceReady() after calling app.receivedEvent()");

	var onSuccess = function(someData){
	    
	    //someData=[{"address":"00:40:B3:8C:5F:16","name":"PAR-TMD200-5F16"}]
	    console.log("MobileMockUp onDeviceReady().getPaired() onSuccess() someData=["+JSON.stringify(someData)+"]");
	    
	    if ((someData.length > 0) && ("address" in someData[0]) && (someData[0].address.trim() != "")){
		
	        var onDiscoveredUuids = function(deviceWithUuid){
	          console.log("MobileMockUp onDeviceiscovered() onDeviceDiscoveredGotUuids=["+JSON.stringify(deviceWithUuid)+"]");
		  if (('uuids' in deviceWithUuid) && (deviceWithUuid.uuids.length > 0) && (deviceWithUuid.uuids[0].trim() != "")){	
	            tmdDevice.uuid = deviceWithUuid.uuids[0];
		    alert("Discovery Complete!");
		  }
		  else{
		    alert("Unable to detect device");
		  }
	        };

	        var onDiscoverUuidsError = function(msg){
		    alert("ERROR GETTING UUID msg=["+JSON.stringify(msg)+"]"); 
	        };
	    
   	        tmdDevice.address = someData[0].address;
	        //get uuid
	        window.bluetooth.getUuids(onDiscoveredUuids, onDiscoverUuidsError, tmdDevice.address);		

	    }
	    else{
		alert ("NO ADDRESS DETECTED");
	    }
	};

	var onError = function(){
	    alert("No paired device");
	};
	
	window.bluetooth.getPaired(onSuccess, onError);
	
	$('#discoverDeviceButton').click(function(){
	    app.discoverDevice();
        });

        $('#startButton').click(function(){
            app.getDeptsForUser();
	});

        $('#readTempFromTmdButton').click(function(){ app.readTempFromTMD() });

	$('#mainPageHeaderId').bind( "tap", function(){
	    if (('address' in tmdDevice) && ('uuid' in tmdDevice)){
		alert("address: "+tmdDevice.address+" uuid: "+tmdDevice.uuid);
	    }
	    else{
		
	    }
	});

    },
    getDeptsForUser: function(){

	var assignedUser = $('#assignedUser').val();
	pass = $('#pass').val();
	server = $('#server').val();
	port = $('#port').val();

	if (assignedUser.trim() == ""){
	    alert("Please enter a user name");
	}
	else if (pass.trim() == ""){
	    alert("Password cannot be blank");
	}
	else if (server.trim() == ""){
	    alert("Please enter a server name");
	}
	else if (port.trim() == ""){
	    alert("Please enter a port number");
	    var regex=/^[0-9]+$/;
            if (port.match(regex)){
                alert("Port number cannot contain any letters");
            }
	}
	else{

	
	    console.log("getTasksByUser assignedUser=["+assignedUser+"] pass=["+pass+"] server=["+server+"] port=["+port+"]");

	    var getDeptsForUserParms = new Array();
	    getDeptsForUserParms[0]="SPX@getDeptsForUser";
	    getDeptsForUserParms[1]="Departments";
	    getDeptsForUserParms[2]=assignedUser;
	    app.getData(getDeptsForUserParms);

	    $.mobile.changePage("#index", { transition: 'slide' });
	}



    },
    //getData: function(paramStr, endpoint, displayHeader){
    getData: function(parmArr){
	//parmArr[0]=endpoint
	//parmArr[1]=displayHeader
	//parmArr[2]=assignedUser
	// ...

	var endpoint = parmArr[0];
	var displayHeader = parmArr[1];
	
	var parms = new Object();
	parms.userName = parmArr[2];
	
	var serverName = server + ":" + port;
	var encoded = Base64().encode(parms.userName + ':' + pass);
	var authType =  'Basic ' + encoded;
	
	var option = endpoint+"?action=start&params=" + JSON.stringify(parms);
	var URL = serverName + "/rest/bpm/wle/v1/service/"+option;

	console.log("MobileMockUp getData() START");
	console.log("MobileMockUp getData() parms=("+JSON.stringify(parms)+")" + " endpoint=["+endpoint+"] displayHeader=["+displayHeader+"]");
	console.log("MobileMockUp getData() URL=["+URL+"]");
	
	$.ajax({
        url: URL,
        type: "POST",
        crossDomain: true,
        jsonp: "callback",
        beforeSend: function (xhr) {
            xhr.setRequestHeader("Authorization", authType);
        },
        success: function (result) {

	    console.log("MobileMockUp getData() ajax success result="+JSON.stringify(result));
	    if (endpoint === "SPX@getDeptsForUser"){
		app.displayData(parmArr, result.data.data.depts.items);
            }
      	    else if (endpoint === "SPX@getCheckLists"){
		app.displayData(parmArr, result.data.data.checklists.items);
            }
	    else if (endpoint === "SPX@getChecks"){
		app.displayData(parmArr, result.data.data.checks.items);
	    }

        },
        error: function(jqXHR, textStatus, errorThrown) {
            alert('Unable to retrieve '+displayHeader);

                console.log('MobileMockUp getData() ajax error jqXHR=['+JSON.stringify(jqXHR)+']');
                console.log('MobileMockUp getData() ajax error textStatus=['+textStatus+']');
                console.log('MobileMockUp getData() ajax error errorThrown=['+errorThrown+']');
            },
        });
    },
    displayData: function(currParmArr, list){
        //currParmArr[0] is endpoint
	//currParmArr[1] is displayHeader
	//currParmArr[2] is assignedUser
	//currParmArr[3] is department
	var currEndPt = currParmArr[0];
	var headerText = currParmArr[1];
	
	console.log("MobileMockUp displayData() START");
	console.log("MobileMockUp displayData() currParmArr=["+currParmArr+"]");
	console.log("MobileMockUp displayTaskList() currEndPt="+currEndPt+" headerText="+headerText);
	console.log("MobileMockUp displayTaskList() list=["+JSON.stringify(list)+"]");

	var nextParmArr = new Array();
	
	var nextEndpt;
        var nextHeaderText;
    
	if (currEndPt === "SPX@getDeptsForUser"){
	    nextParmArr[0] = "SPX@getCheckLists";
	    nextParmArr[1] = "Check Lists";
	    nextParmArr[2] = currParmArr[2];
	}
	else if (currEndPt === "SPX@getCheckLists"){
	    nextParmArr[0] = "SPX@getChecks";	
	    nextParmArr[1] = "HEADER"; 
	    nextParmArr[2] = currParmArr[2];
	    nextParmArr[3] = currParmArr[3];
	}
	else if (currEndPt === "SPX@getCheck"){
	}
	
	var htmlListString="";
	var newLink;
	
	$('#headerText').text(headerText);

        $('#taskListUL').empty();
for(var j = 0; j < 10; j++){	
        for (var i = 0; i < list.length; i++){


	    if (currEndPt === "SPX@getDeptsForUser"){
	      nextParmArr[3] = list[i];
	      //doesn't work!	
	      //parmArr["userName"]=currParmsObj.userName;
	      //parmArr["dept"]=list[i];
	    }
            if (currEndPt === "SPX@getCheckLists"){
		nextParmArr[1] = list[i];
	    }
	    
	    if (currEndPt === "SPX@getChecks"){
		newLink="<a style='background:#e9e9e9;padding-top:5%;border-top: thin solid black; display:block;font-size:12px;font-weight:normal;color:#000000;text-decoration: none;' href='#' onclick='app.tempTask("+i+",\"" + list[i] + "\")'><pre><img src=\"img/task.png\"></img>   " + list[i] + "     </pre></a><br>";
	    }
	    else{
		//var str = JSON.stringify(parmObj);
		//console.log("MobileMockUp displayData() str=["+str+"]");
	        //str = str.toString().replace(/"/g, '\\"');
		//console.log("MobileMockUp displayData() after replace str=["+str+"]");
		
	        //newLink = "<li><a class='wrappinganchor' style='background:#e9e9e9;padding-top:5%;border-top: thin solid black; display:block;font-size:24px;font-weight:normal;color:#000000;text-decoration: none;'  href='#' onclick='app.getData(\""+str+"\",\""+nextEndpt+"\",\""+nextHeaderText+"\")'><pre>  " + list[i] + "     </pre></a><br></li>";

	        //newLink = "<li class=\"styledli\" id=\"id" + i + "\" ><p style=\"white-space: normal !important;padding-top:5%;border-top: thin solid black;font-size:24px;font-weight:normal;color:#000000;padding-left:5%;padding-right:5%;\" >" + list[i] + "</p></li>";

		//this works
		//newLink = "<li data-parm1=\"" + list[i] + "\" class=\"styledli\" id=\"id" + i + "\" ><p style=\"white-space: normal !important;padding-top:5%;border-top: thin solid black;font-size:24px;font-weight:normal;color:#000000;padding-left:5%;padding-right:5%;\" >" + list[i] + "</p></li>";

		/*$("#id"+i).data("parm1",parmObj);
		$("#id"+i).data("parm2",nextEndpt);
		$("#id"+i).data("parm3",nextHeaderText);*/

		//newLink = "<li data-parm1=\"" + list[i] + "\" class=\"styledli\" id=\"id" + i + "\" ><p>" + list[i] + "</p></li>";

		//working
	        newLink = "<li data-parm1=\"" + nextParmArr + "\" class=\"styledli\" id=\"id" + i + "\" ><p style=\"white-space: normal !important;padding-top:5%;border-top: thin solid black;font-size:24px;font-weight:normal;color:#000000;padding-left:5%;padding-right:5%;\" >" + list[i] + "</p></li>";
   
	    }
	    
	    console.log("MobileMockUp displayData() adding ["+newLink+"]");	    
	    htmlListString=htmlListString+newLink;

	}
}

	$( 'li' ).off( 'click' );

	$('#taskListUL').append(htmlListString);
	
	/*$('#taskListUL').on('click', 'li', function(e) {

	    var myArr = $(this).data("parm1").split(",");
	    var alertMessage="";
	    for (var myArrIdx=0; myArrIdx < myArr.length; myArrIdx++){
		alertMessage = alertMessage + "myArr["+myArrIdx+"]=" + myArr[myArrIdx];
	    }
            alert(alertMessage);
	    app.getData(myArr);
            });*/

	$('li').on('click', function(e) {

	    var myArr = $(this).data("parm1").split(",");
	    var alertMessage="";
	    for (var myArrIdx=0; myArrIdx < myArr.length; myArrIdx++){
		alertMessage = alertMessage + "myArr["+myArrIdx+"]=" + myArr[myArrIdx];
	    }
            alert(alertMessage);
	    app.getData(myArr);
            }) 
	

    $('[data-role="content"]').trigger('create');
    $(".example-wrapper").iscrollview("refresh");

	//with this code sometimes i go thru normally and sometimes i skip screens
        //$.mobile.changePage("#index", { transition: 'slide' });

	// with this code i either picked a Department and went straight to "Mandatory rotisserie cooking" screen OR to Start screen
	//if (currEndPt === "SPX@getDeptsForUser"){
            //$.mobile.changePage("#index", { transition: 'slide' });

	    //is this necessary at all? 
	    //$('a').bind('click', function(e) {
	      //console.log("MobileMockUp anchor tag clicked calling e.stopImmediatePropagation()");
              //e.stopImmediatePropagation(); //hit Start, pick Meat, Start screen displays again, 
	      //console.log("MobileMockUp anchor tag clicked calling e.preventDefault()");
	      //e.preventDefault(); 
            //});
	    
	//}
    },    
    tempTask: function(someId, someText){

	console.log("MobileMockUp tempTask() START someId="+someId+" someText="+someText);

	if (!('address' in tmdDevice) || !('uuid' in tmdDevice)){
	    if (confirm('Put TMD in discoverable mode and hit OK')) {
               app.discoverDevice();
            } 
	}
	else{


	    $.mobile.changePage("#tempTask", { 
	   	                 transition: 'slide' });

	    $('#tempTaskNameH1').text(someText);
	    $('#tmdTemp').text("");
	    
	    //TO DO do i need this any more?
	    $('#readTempFromTmdButton').bind('click', function(e) {
                e.stopImmediatePropagation(); 
	    });

	}

	
    },
    nonTempTask: function(someId, someText){
            $.mobile.changePage("#nonTempTask", { 
		  transition: 'slide' });	
    },
    discoverDevice: function(){
	console.log("MobileMockUp pairWithDevice() START");
	var onDeviceDiscovered = function(discoveredDevice){

	    var onDeviceDiscoveredGotUuids = function(deviceWithUuid){
	      console.log("MobileMockUp onDeviceDiscovered() onDeviceDiscoveredGotUuids=["+JSON.stringify(deviceWithUuid)+"]");
		if (('uuids' in deviceWithUuid) && (deviceWithUuid.uuids.length > 0) && (deviceWithUuid.uuids[0].trim() != "")){	
	            tmdDevice.uuid = deviceWithUuid.uuids[0];
	            //$('#deviceNameTextArea').val("address: "+tmdDevice.address+" uuid: "+tmdDevice.uuid);
		    //alert("Discovery Complete!");
		}
		else{
		    alert("Unable to detect device");
		}
	    };

	    var onDeviceDiscoveredOnError = function(msg){
		console.log("MobileMockUp onDeviceDiscoveredOnError msg=["+JSON.stringify(msg)+"]"); 
	    };
	    
	    console.log("MobileMockUp onDeviceDiscovered discoveredDevice=["+JSON.stringify(discoveredDevice)+"]");
	    if (discoveredDevice.address.trim() != ""){
		tmdDevice.address = discoveredDevice.address;
	        //get uuid
	        window.bluetooth.getUuids(onDeviceDiscoveredGotUuids, onDeviceDiscoveredOnError, tmdDevice.address);		
	    }
	    else{
		alert("Device Discover Failed");
	    }
	
	};
	
	var onDiscoveryFinished = function(){
	};
	window.bluetooth.startDiscovery(onDeviceDiscovered, onDiscoveryFinished, onDiscoveryFinished);
    },
    readTempFromTMD: function(){
	console.log("MobileMockUp readTempFromTMD() START");
        if (confirm("Take Temperature")){

	//alert ("Take Temperature");
	
    	    var onConnectionEstablished = function(){

	        console.log("MobileMockup tempTask() onConnectionEstablished START");

	        var stopConnectionManagerSuccess = function(){
		    console.log("MobileMockUp tempTask() stopConnectionManager succeeded");
	        };

	        var stopConnectionManagerFail = function(){
		    console.log("MobileMockUp tempTask() stopConnectionManager failed");
	        };

	        var disconnectSuccess = function(){
		    console.log("MobileMockUp tempTask() disconnect succeeded");
	        };

	        var disconnectFail = function(){
		    console.log("MobileMockUp tempTask() disconnect failed");
	        };
		
	        var onMessageReceived = function(msg){
		    //alert("RECEIVED msg=["+msg+"]");
		    //$('#statusDiv').append('<p align="left" style="font-size:24px"> '+msg+'<p>');
		    $('#tmdTemp').text(msg);
		    //window.bluetooth.stopConnectionManager(stopConnectionManagerSuccess, stopConnectionManagerFail);
		    console.log("MobileMockUp readTempFromTMD() calling window.bluetooth.disconnect()");
                    window.bluetooth.disconnect(disconnectSuccess, disconnectFail);
	        };

	        var onConnectionLost = function(){
		    //alert("CONNECTION LOST");
		    //window.bluetooth.stopConnectionManager(stopConnectionManagerSuccess, stopConnectionManagerFail);
		    console.log("MobileMockUp readTempFromTMD() calling window.bluetooth.disconnect()");
                    window.bluetooth.disconnect(disconnectSuccess, disconnectFail);		    
	        };

	        console.log("MobileMockUp readTempFromTMD() calling window.bluetooth.startConnectionManager()");		
	        window.bluetooth.startConnectionManager(onMessageReceived, onConnectionLost);
	    };
	
	    var onError = function(msg){
	      //alert("WE HAD ERROR msg=["+JSON.stringify(msg)+"]");
	    };

	    console.log("MobileMockUp readTempFromTMD() calling window.bluetooth.connect()");
	    window.bluetooth.connect(onConnectionEstablished, onError, { address: tmdDevice.address,uuid: tmdDevice.uuid});
	}
    },
    sendTemp: function(){
        alert ("SEND TEMP");	
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {
        console.log('Received Event: ' + id);
    }
};

app.initialize();
